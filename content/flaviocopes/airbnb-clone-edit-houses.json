{
  "title": "Airbnb clone, edit houses",
  "url": "https://flaviocopes.com/clone-airbnb-nextjs-33-edit-houses/",
  "date": "Fri, 07 Jan 2022 07:00:00 +0200",
  "content": "        <blockquote><p>This post is part of a new series where we build a clone of Airbnb with Next.js. <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-introduction/\">See the first post here</a>.</p></blockquote><ul><li>Part 1: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-1-install-nextjs/\">Let&rsquo;s start by installing Next.js</a></li><li>Part 2: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-2-list-houses/\">Build the list of houses</a></li><li>Part 3: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-3-house-detail/\">Build the house detail view</a></li><li>Part 4: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-4-navigation/\">CSS and navigation bar</a></li><li>Part 5: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-5-datepicker/\">Start with the date picker</a></li><li>Part 6: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-6-add-sidebar/\">Add the sidebar</a></li><li>Part 7: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-7-calendar-library/\">Add react-day-picker</a></li><li>Part 8: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-8-add-calendar/\">Add the calendar to the page</a></li><li>Part 9: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-9-configure-calendar/\">Configure the DayPickerInput component</a></li><li>Part 10: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-10-sync-dates/\">Sync the start and end dates</a></li><li>Part 11: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-11-show-price/\">Show the price for the chosen dates</a></li><li>Part 12: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-12-login-signup-forms/\">Login and signup forms</a></li><li>Part 13: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-13-activate-modals/\">Activate the modal</a></li><li>Part 14: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-14-send-registration-data-to-server/\">Send registration data to the server</a></li><li>Part 15: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-15-add-postgres/\">Add postgres</a></li><li>Part 16: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-16-implement-model-and-database-connection/\">Implement model and DB connection</a></li><li>Part 17: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-17-create-session/\">Create a session token</a></li><li>Part 18: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-18-login/\">Implement login</a></li><li>Part 19: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-19-determine-login/\">Determine if we are logged in</a></li><li>Part 20: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-20-logged-in-after-login/\">Change state after we login</a></li><li>Part 21: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-21-login-after-registration/\">Log in after registration</a></li><li>Part 22: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-22-models-data-db/\">Create the models and move data to the db</a></li><li>Part 23: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-23-use-db-instead-of-file/\">Use the database instead of the file</a></li><li>Part 24: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-24-implement-bookings/\">Handle bookings</a></li><li>Part 25: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-25-booked-dates/\">Handle booked dates</a></li><li>Part 26: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-26-prevent-booking/\">Prevent booking if already booked</a></li><li>Part 27: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-27-add-stripe/\">Adding Stripe for payments</a></li><li>Part 28: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-28-stripe-webhooks/\">Airbnb clone, handling Stripe webhooks</a></li><li>Part 29: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-29-view-bookings/\">Airbnb clone, view bookings</a></li><li>Part 30: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-30-clean-bookings/\">Airbnb clone, clean bookings</a></li><li>Part 31: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-31-managing-houses/\">Airbnb clone, managing houses</a></li><li>Part 32: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-32-adding-a-new-house/\">Airbnb clone, adding a new house</a></li></ul><p>In the previous lesson we let people add a new house. In this lesson we&rsquo;ll let them edit houses they already added.</p><p>Create a file named <code>pages/host/[id].js</code>.</p><p>In there, we&rsquo;ll create the form to edit the house.</p><p>Like we did in the <code>pages/houses/[id].js</code>, we can get the data of the house in the <code>getInitialProps</code> function, where we&rsquo;ll get the <code>id</code> of the house in the <code>query</code> value.</p><p>Now that we have this information, we can ask the server for the house data. We&rsquo;ll reuse an endpoint we already created, which listens for <code>/api/houses/:id</code>:</p><blockquote><p><code>pages/host/[id].js</code></p></blockquote><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> <span >axios</span> <span >from</span> <span >&#39;axios&#39;</span><span >import</span> <span >Layout</span> <span >from</span> <span >&#39;../../components/Layout&#39;</span><span >const</span> <span >EditHouse</span> <span >=</span> <span >props</span> =&gt; {  <span >return</span> <span >&lt;</span><span >Layout</span> <span >content</span><span >=</span>{<span >&lt;</span><span >div</span><span >&gt;</span>{<span >props</span>.<span >house</span>.<span >title</span>}<span >&lt;</span><span >/div&gt;} /</span><span >&gt;</span>}<span >EditHouse</span>.<span >getInitialProps</span> <span >=</span> <span >async</span> ({ <span >query</span> }) =&gt; {  <span >const</span> { <span >id</span> } <span >=</span> <span >query</span>  <span >const</span> <span >response</span> <span >=</span> <span >await</span> <span >axios</span>.<span >get</span>(<span >`http://localhost:3000/api/houses/</span><span >${</span><span >id</span><span >}</span><span >`</span>)  <span >return</span> {    <span >house</span><span >:</span> <span >response</span>.<span >data</span>  }}<span >export</span> <span >default</span> <span >EditHouse</span></code></pre></div><p>We import <code>axios</code> and we make the call to <code>/api/houses/${id}</code> inside <code>getInitialProps</code>, assigning the data we get from that endpoint to the <code>house</code> prop.</p><p>Cool! Now we can add the form to the template.</p><p>I already envision this will be a lot similar to the one we defined in <code>pages/host/new.js</code>, so it&rsquo;s best to extract that to its own component, which we store into <code>components/HouseForm.js</code>. It&rsquo;s very bad, in my opinion, to have the same exact markup twice, and this is the perfect place to introduce a generalized component, where to extract this HTML.</p><p>In this file, we get the house data via props, and if this is loaded by the <code>pages/host/[id].js</code> component, which is the one we use to edit the house, this object will be present.</p><p>Otherwise, for <code>pages/host/new.js</code>, there will be no props, and we&rsquo;ll use the default values as before.</p><p>We also pass an <code>edit</code> prop to the component, so we know that it&rsquo;s in editing mode, or in &ldquo;new&rdquo; mode.</p><p>I also took the opportunity to make the form look nicer, using a grid.</p><p>Here it is:</p><blockquote><p><code>components/HouseForm.js</code></p></blockquote><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> { <span >useState</span> } <span >from</span> <span >&#39;react&#39;</span><span >import</span> <span >axios</span> <span >from</span> <span >&#39;axios&#39;</span><span >import</span> <span >Router</span> <span >from</span> <span >&#39;next/router&#39;</span><span >const</span> <span >HouseForm</span> <span >=</span> <span >props</span> =&gt; {  <span >const</span> <span >id</span> <span >=</span> (<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >id</span>) <span >||</span> <span >null</span>  <span >const</span> [<span >title</span>, <span >setTitle</span>] <span >=</span> <span >useState</span>((<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >title</span>) <span >||</span> <span >&#39;&#39;</span>)  <span >const</span> [<span >town</span>, <span >setTown</span>] <span >=</span> <span >useState</span>((<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >town</span>) <span >||</span> <span >&#39;&#39;</span>)  <span >const</span> [<span >price</span>, <span >setPrice</span>] <span >=</span> <span >useState</span>((<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >price</span>) <span >||</span> <span >0</span>)  <span >const</span> [<span >picture</span>, <span >setPicture</span>] <span >=</span> <span >useState</span>(    (<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >picture</span>) <span >||</span> <span >&#39;&#39;</span>  )  <span >const</span> [<span >description</span>, <span >setDescription</span>] <span >=</span> <span >useState</span>(    (<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >description</span>) <span >||</span> <span >&#39;&#39;</span>  )  <span >const</span> [<span >guests</span>, <span >setGuests</span>] <span >=</span> <span >useState</span>((<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >guests</span>) <span >||</span> <span >0</span>)  <span >const</span> [<span >bedrooms</span>, <span >setBedrooms</span>] <span >=</span> <span >useState</span>(    (<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >bedrooms</span>) <span >||</span> <span >0</span>  )  <span >const</span> [<span >beds</span>, <span >setBeds</span>] <span >=</span> <span >useState</span>((<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >beds</span>) <span >||</span> <span >0</span>)  <span >const</span> [<span >baths</span>, <span >setBaths</span>] <span >=</span> <span >useState</span>((<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >baths</span>) <span >||</span> <span >0</span>)  <span >const</span> [<span >wifi</span>, <span >setWifi</span>] <span >=</span> <span >useState</span>((<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >wifi</span>) <span >||</span> <span >false</span>)  <span >const</span> [<span >kitchen</span>, <span >setKitchen</span>] <span >=</span> <span >useState</span>(    (<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >kitchen</span>) <span >||</span> <span >false</span>  )  <span >const</span> [<span >heating</span>, <span >setHeating</span>] <span >=</span> <span >useState</span>(    (<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >heating</span>) <span >||</span> <span >false</span>  )  <span >const</span> [<span >freeParking</span>, <span >setFreeParking</span>] <span >=</span> <span >useState</span>(    (<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >freeParking</span>) <span >||</span> <span >false</span>  )  <span >const</span> [<span >entirePlace</span>, <span >setEntirePlace</span>] <span >=</span> <span >useState</span>(    (<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >entirePlace</span>) <span >||</span> <span >false</span>  )  <span >const</span> [<span >type</span>, <span >setType</span>] <span >=</span> <span >useState</span>(    (<span >props</span>.<span >house</span> <span >&amp;&amp;</span> <span >props</span>.<span >house</span>.<span >type</span>) <span >||</span> <span >&#39;Entire house&#39;</span>  )  <span >const</span> <span >houseTypes</span> <span >=</span> [<span >&#39;Entire house&#39;</span>, <span >&#39;Room&#39;</span>]  <span >return</span> (    <span >&lt;</span><span >div</span><span >&gt;</span>      <span >&lt;</span><span >form</span>        <span >onSubmit</span><span >=</span>{<span >async</span> <span >event</span> =&gt; {          <span >event</span>.<span >preventDefault</span>()          <span >try</span> {            <span >const</span> <span >response</span> <span >=</span> <span >await</span> <span >axios</span>.<span >post</span>(              <span >`/api/host/</span><span >${</span><span >props</span>.<span >edit</span> <span >?</span> <span >&#39;edit&#39;</span> <span >:</span> <span >&#39;new&#39;</span><span >}</span><span >`</span>,              {                <span >house</span><span >:</span> {                  <span >id</span><span >:</span> <span >props</span>.<span >edit</span> <span >?</span> <span >id</span> <span >:</span> <span >null</span>,                  <span >title</span>,                  <span >town</span>,                  <span >price</span>,                  <span >picture</span>,                  <span >description</span>,                  <span >guests</span>,                  <span >bedrooms</span>,                  <span >beds</span>,                  <span >baths</span>,                  <span >wifi</span>,                  <span >kitchen</span>,                  <span >heating</span>,                  <span >freeParking</span>,                  <span >entirePlace</span>,                  <span >type</span>                }              }            )            <span >if</span> (<span >response</span>.<span >data</span>.<span >status</span> <span >===</span> <span >&#39;error&#39;</span>) {              <span >alert</span>(<span >response</span>.<span >data</span>.<span >message</span>)              <span >return</span>            }            <span >Router</span>.<span >push</span>(<span >&#39;/host&#39;</span>)          } <span >catch</span> (<span >error</span>) {            <span >alert</span>(<span >error</span>.<span >response</span>.<span >data</span>.<span >message</span>)            <span >return</span>          }        }}<span >&gt;</span>        <span >&lt;</span><span >p</span><span >&gt;</span>          <span >&lt;</span><span >label</span><span >&gt;</span><span >House</span> <span >title</span><span >&lt;</span><span >/label&gt;</span>          <span >&lt;</span><span >input</span>            <span >required</span>            <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setTitle</span>(<span >event</span>.<span >target</span>.<span >value</span>)}            <span >type</span><span >=</span><span >&#39;text&#39;</span>            <span >placeholder</span><span >=</span><span >&#39;House title&#39;</span>            <span >value</span><span >=</span>{<span >title</span>}          <span >/&gt;</span>        <span >&lt;</span><span >/p&gt;</span>        <span >&lt;</span><span >p</span><span >&gt;</span>          <span >&lt;</span><span >label</span><span >&gt;</span><span >Town</span><span >&lt;</span><span >/label&gt;</span>          <span >&lt;</span><span >input</span>            <span >required</span>            <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setTown</span>(<span >event</span>.<span >target</span>.<span >value</span>)}            <span >type</span><span >=</span><span >&#39;text&#39;</span>            <span >placeholder</span><span >=</span><span >&#39;Town&#39;</span>            <span >value</span><span >=</span>{<span >town</span>}          <span >/&gt;</span>        <span >&lt;</span><span >/p&gt;</span>        <span >&lt;</span><span >p</span><span >&gt;</span>          <span >&lt;</span><span >label</span><span >&gt;</span><span >Price</span> <span >per</span> <span >night</span><span >&lt;</span><span >/label&gt;</span>          <span >&lt;</span><span >input</span>            <span >required</span>            <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setPrice</span>(<span >event</span>.<span >target</span>.<span >value</span>)}            <span >type</span><span >=</span><span >&#39;number&#39;</span>            <span >placeholder</span><span >=</span><span >&#39;Price per night&#39;</span>            <span >value</span><span >=</span>{<span >price</span>}          <span >/&gt;</span>        <span >&lt;</span><span >/p&gt;</span>        <span >&lt;</span><span >p</span><span >&gt;</span>          <span >&lt;</span><span >label</span><span >&gt;</span><span >House</span> <span >picture</span> <span >URL</span><span >&lt;</span><span >/label&gt;</span>          <span >&lt;</span><span >input</span>            <span >required</span>            <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setPicture</span>(<span >event</span>.<span >target</span>.<span >value</span>)}            <span >type</span><span >=</span><span >&#39;text&#39;</span>            <span >placeholder</span><span >=</span><span >&#39;House picture URL&#39;</span>            <span >value</span><span >=</span>{<span >picture</span>}          <span >/&gt;</span>        <span >&lt;</span><span >/p&gt;</span>        <span >&lt;</span><span >p</span><span >&gt;</span>          <span >&lt;</span><span >label</span><span >&gt;</span><span >House</span> <span >description</span><span >&lt;</span><span >/label&gt;</span>          <span >&lt;</span><span >textarea</span>            <span >required</span>            <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setDescription</span>(<span >event</span>.<span >target</span>.<span >value</span>)}            <span >value</span><span >=</span>{<span >description</span>}<span >&gt;&lt;</span><span >/textarea&gt;</span>        <span >&lt;</span><span >/p&gt;</span>        <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;grid&#39;</span><span >&gt;</span>          <span >&lt;</span><span >div</span><span >&gt;</span>            <span >&lt;</span><span >p</span><span >&gt;</span>              <span >&lt;</span><span >label</span><span >&gt;</span>Number <span >of</span> <span >guests</span><span >&lt;</span><span >/label&gt;</span>              <span >&lt;</span><span >input</span>                <span >required</span>                <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setGuests</span>(<span >event</span>.<span >target</span>.<span >value</span>)}                <span >type</span><span >=</span><span >&#39;number&#39;</span>                <span >placeholder</span><span >=</span><span >&#39;Number of guests&#39;</span>                <span >value</span><span >=</span>{<span >guests</span>}              <span >/&gt;</span>            <span >&lt;</span><span >/p&gt;</span>            <span >&lt;</span><span >p</span><span >&gt;</span>              <span >&lt;</span><span >label</span><span >&gt;</span>Number <span >of</span> <span >bedrooms</span><span >&lt;</span><span >/label&gt;</span>              <span >&lt;</span><span >input</span>                <span >required</span>                <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setBedrooms</span>(<span >event</span>.<span >target</span>.<span >value</span>)}                <span >type</span><span >=</span><span >&#39;number&#39;</span>                <span >placeholder</span><span >=</span><span >&#39;Number of bedrooms&#39;</span>                <span >value</span><span >=</span>{<span >bedrooms</span>}              <span >/&gt;</span>            <span >&lt;</span><span >/p&gt;</span>            <span >&lt;</span><span >p</span><span >&gt;</span>              <span >&lt;</span><span >label</span><span >&gt;</span>Number <span >of</span> <span >beds</span><span >&lt;</span><span >/label&gt;</span>              <span >&lt;</span><span >input</span>                <span >required</span>                <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setBeds</span>(<span >event</span>.<span >target</span>.<span >value</span>)}                <span >type</span><span >=</span><span >&#39;number&#39;</span>                <span >placeholder</span><span >=</span><span >&#39;Number of beds&#39;</span>                <span >value</span><span >=</span>{<span >beds</span>}              <span >/&gt;</span>            <span >&lt;</span><span >/p&gt;</span>            <span >&lt;</span><span >p</span><span >&gt;</span>              <span >&lt;</span><span >label</span><span >&gt;</span>Number <span >of</span> <span >baths</span><span >&lt;</span><span >/label&gt;</span>              <span >&lt;</span><span >input</span>                <span >required</span>                <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setBaths</span>(<span >event</span>.<span >target</span>.<span >value</span>)}                <span >type</span><span >=</span><span >&#39;number&#39;</span>                <span >placeholder</span><span >=</span><span >&#39;Number of baths&#39;</span>                <span >value</span><span >=</span>{<span >baths</span>}              <span >/&gt;</span>            <span >&lt;</span><span >/p&gt;</span>          <span >&lt;</span><span >/div&gt;</span>          <span >&lt;</span><span >div</span><span >&gt;</span>            <span >&lt;</span><span >p</span><span >&gt;</span>              <span >&lt;</span><span >label</span><span >&gt;</span><span >Does</span> <span >it</span> <span >have</span> <span >Wifi</span><span >?&lt;</span><span >/label&gt;</span>              <span >&lt;</span><span >select</span>                <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setWifi</span>(<span >event</span>.<span >target</span>.<span >value</span>)}                <span >value</span><span >=</span>{<span >wifi</span>}<span >&gt;</span>                <span >&lt;</span><span >option</span> <span >value</span><span >=</span><span >&#39;true&#39;</span><span >&gt;</span><span >Yes</span><span >&lt;</span><span >/option&gt;</span>                <span >&lt;</span><span >option</span> <span >value</span><span >=</span><span >&#39;false&#39;</span><span >&gt;</span><span >No</span><span >&lt;</span><span >/option&gt;</span>              <span >&lt;</span><span >/select&gt;</span>            <span >&lt;</span><span >/p&gt;</span>            <span >&lt;</span><span >p</span><span >&gt;</span>              <span >&lt;</span><span >label</span><span >&gt;</span><span >Does</span> <span >it</span> <span >have</span> <span >a</span> <span >kitchen</span><span >?&lt;</span><span >/label&gt;</span>              <span >&lt;</span><span >select</span>                <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setKitchen</span>(<span >event</span>.<span >target</span>.<span >value</span>)}                <span >value</span><span >=</span>{<span >kitchen</span>}<span >&gt;</span>                <span >&lt;</span><span >option</span> <span >value</span><span >=</span><span >&#39;true&#39;</span><span >&gt;</span><span >Yes</span><span >&lt;</span><span >/option&gt;</span>                <span >&lt;</span><span >option</span> <span >value</span><span >=</span><span >&#39;false&#39;</span><span >&gt;</span><span >No</span><span >&lt;</span><span >/option&gt;</span>              <span >&lt;</span><span >/select&gt;</span>            <span >&lt;</span><span >/p&gt;</span>            <span >&lt;</span><span >p</span><span >&gt;</span>              <span >&lt;</span><span >label</span><span >&gt;</span><span >Does</span> <span >it</span> <span >have</span> <span >heating</span><span >?&lt;</span><span >/label&gt;</span>              <span >&lt;</span><span >select</span>                <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setHeating</span>(<span >event</span>.<span >target</span>.<span >value</span>)}                <span >value</span><span >=</span>{<span >heating</span>}<span >&gt;</span>                <span >&lt;</span><span >option</span> <span >value</span><span >=</span><span >&#39;true&#39;</span><span >&gt;</span><span >Yes</span><span >&lt;</span><span >/option&gt;</span>                <span >&lt;</span><span >option</span> <span >value</span><span >=</span><span >&#39;false&#39;</span><span >&gt;</span><span >No</span><span >&lt;</span><span >/option&gt;</span>              <span >&lt;</span><span >/select&gt;</span>            <span >&lt;</span><span >/p&gt;</span>            <span >&lt;</span><span >p</span><span >&gt;</span>              <span >&lt;</span><span >label</span><span >&gt;</span><span >Does</span> <span >it</span> <span >have</span> <span >free</span> <span >parking</span><span >?&lt;</span><span >/label&gt;</span>              <span >&lt;</span><span >select</span>                <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setFreeParking</span>(<span >event</span>.<span >target</span>.<span >value</span>)}                <span >value</span><span >=</span>{<span >freeParking</span>}<span >&gt;</span>                <span >&lt;</span><span >option</span> <span >value</span><span >=</span><span >&#39;true&#39;</span><span >&gt;</span><span >Yes</span><span >&lt;</span><span >/option&gt;</span>                <span >&lt;</span><span >option</span> <span >value</span><span >=</span><span >&#39;false&#39;</span><span >&gt;</span><span >No</span><span >&lt;</span><span >/option&gt;</span>              <span >&lt;</span><span >/select&gt;</span>            <span >&lt;</span><span >/p&gt;</span>            <span >&lt;</span><span >p</span><span >&gt;</span>              <span >&lt;</span><span >label</span><span >&gt;</span><span >Is</span> <span >it</span> <span >the</span> <span >entire</span> <span >place</span><span >?&lt;</span><span >/label&gt;</span>              <span >&lt;</span><span >select</span>                <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setEntirePlace</span>(<span >event</span>.<span >target</span>.<span >value</span>)}                <span >value</span><span >=</span>{<span >entirePlace</span>}<span >&gt;</span>                <span >&lt;</span><span >option</span> <span >value</span><span >=</span><span >&#39;true&#39;</span><span >&gt;</span><span >Yes</span><span >&lt;</span><span >/option&gt;</span>                <span >&lt;</span><span >option</span> <span >value</span><span >=</span><span >&#39;false&#39;</span><span >&gt;</span><span >No</span><span >&lt;</span><span >/option&gt;</span>              <span >&lt;</span><span >/select&gt;</span>            <span >&lt;</span><span >/p&gt;</span>            <span >&lt;</span><span >p</span><span >&gt;</span>              <span >&lt;</span><span >label</span><span >&gt;</span><span >Type</span> <span >of</span> <span >house</span><span >&lt;</span><span >/label&gt;</span>              <span >&lt;</span><span >select</span>                <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setType</span>(<span >event</span>.<span >target</span>.<span >value</span>)}                <span >value</span><span >=</span>{<span >type</span>}<span >&gt;</span>                {<span >houseTypes</span>.<span >map</span>((<span >item</span>, <span >key</span>) =&gt; (                  <span >&lt;</span><span >option</span> <span >value</span><span >=</span>{<span >item</span>} <span >key</span><span >=</span>{<span >key</span>}<span >&gt;</span>                    {<span >item</span>}                  <span >&lt;</span><span >/option&gt;</span>                ))}              <span >&lt;</span><span >/select&gt;</span>            <span >&lt;</span><span >/p&gt;</span>          <span >&lt;</span><span >/div&gt;</span>        <span >&lt;</span><span >/div&gt;</span>        {<span >props</span>.<span >edit</span> <span >?</span> <span >&lt;</span><span >button</span><span >&gt;</span><span >Edit</span> <span >house</span><span >&lt;</span><span >/button&gt; : &lt;button&gt;Add house&lt;/button&gt;}</span>      <span >&lt;</span><span >/form&gt;</span>      <span >&lt;</span><span >style</span> <span >jsx</span><span >&gt;</span>{<span >`</span><span >        input[type=&#39;number&#39;],</span><span >        select,</span><span >        textarea {</span><span >          display: block;</span><span >          padding: 20px;</span><span >          font-size: 20px !important;</span><span >          width: 100%;</span><span >          border: 1px solid #ccc;</span><span >          border-radius: 4px;</span><span >          box-sizing: border-box;</span><span >          margin-bottom: 10px;</span><span >        }</span><span >        form p {</span><span >          display: grid;</span><span >        }</span><span ></span><span >        .grid {</span><span >          display: grid;</span><span >          grid-template-columns: 50% 50%;</span><span >        }</span><span ></span><span >        .grid &gt; div {</span><span >          padding: 50px;</span><span >        }</span><span >      `</span>}<span >&lt;</span><span >/style&gt;</span>    <span >&lt;</span><span >/div&gt;</span>  )}<span >export</span> <span >default</span> <span >HouseForm</span></code></pre></div><p>Now <code>pages/host/new.js</code> is much smaller:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> { <span >useState</span> } <span >from</span> <span >&#39;react&#39;</span><span >import</span> <span >Head</span> <span >from</span> <span >&#39;next/head&#39;</span><span >import</span> <span >axios</span> <span >from</span> <span >&#39;axios&#39;</span><span >import</span> <span >Router</span> <span >from</span> <span >&#39;next/router&#39;</span><span >import</span> <span >Layout</span> <span >from</span> <span >&#39;../../components/Layout&#39;</span><span >import</span> <span >HouseForm</span> <span >from</span> <span >&#39;../../components/HouseForm&#39;</span><span >const</span> <span >NewHouse</span> <span >=</span> () =&gt; {  <span >return</span> (    <span >&lt;</span><span >Layout</span>      <span >content</span><span >=</span>{        <span >&lt;&gt;</span>          <span >&lt;</span><span >Head</span><span >&gt;</span>            <span >&lt;</span><span >title</span><span >&gt;</span><span >Add</span> <span >a</span> <span >new</span> <span >house</span><span >&lt;</span><span >/title&gt;</span>          <span >&lt;</span><span >/Head&gt;</span>          <span >&lt;</span><span >HouseForm</span> <span >edit</span><span >=</span>{<span >false</span>} <span >/&gt;</span>        <span >&lt;</span><span >/&gt;</span>      }    <span >/&gt;</span>  )}<span >export</span> <span >default</span> <span >NewHouse</span></code></pre></div><p>And here is our <code>pages/host/[id].js</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> <span >axios</span> <span >from</span> <span >&#39;axios&#39;</span><span >import</span> <span >Layout</span> <span >from</span> <span >&#39;../../components/Layout&#39;</span><span >import</span> <span >HouseForm</span> <span >from</span> <span >&#39;../../components/HouseForm&#39;</span><span >import</span> <span >Head</span> <span >from</span> <span >&#39;next/head&#39;</span><span >const</span> <span >EditHouse</span> <span >=</span> <span >props</span> =&gt; {  <span >return</span> (    <span >&lt;</span><span >Layout</span>      <span >content</span><span >=</span>{        <span >&lt;&gt;</span>          <span >&lt;</span><span >Head</span><span >&gt;</span>            <span >&lt;</span><span >title</span><span >&gt;</span><span >Edit</span> <span >house</span><span >&lt;</span><span >/title&gt;</span>          <span >&lt;</span><span >/Head&gt;</span>          <span >&lt;</span><span >HouseForm</span> <span >edit</span><span >=</span>{<span >true</span>} <span >house</span><span >=</span>{<span >props</span>.<span >house</span>} <span >/&gt;</span>        <span >&lt;</span><span >/&gt;</span>      }    <span >/&gt;</span>  )}<span >EditHouse</span>.<span >getInitialProps</span> <span >=</span> <span >async</span> ({ <span >query</span> }) =&gt; {  <span >const</span> { <span >id</span> } <span >=</span> <span >query</span>  <span >const</span> <span >response</span> <span >=</span> <span >await</span> <span >axios</span>.<span >get</span>(<span >`http://localhost:3000/api/houses/</span><span >${</span><span >id</span><span >}</span><span >`</span>)  <span >return</span> {    <span >house</span><span >:</span> <span >response</span>.<span >data</span>  }}<span >export</span> <span >default</span> <span >EditHouse</span></code></pre></div><p>See? Here we pass the <code>house</code> prop, which contains the house data.</p><p>Now we need to define an API that listens on POST <code>/api/host/edit</code> in <code>server.js</code>:</p><blockquote><p><code>server.js</code></p></blockquote><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >server</span>.<span >post</span>(<span >&#39;/api/host/edit&#39;</span>, <span >async</span> (<span >req</span>, <span >res</span>) =&gt; {})</code></pre></div><p>Ind in there we must call the <code>update()</code> function on the Sequelize House model, but before (after checking if the user is logged in) we make sure the current user is also the owner of the house, to disallow editing other people&rsquo;s houses.</p><p>How? We get the user email, we ask the User model to find that user, we check if the user is the host, finally we update the data.</p><p>Remember? We have already used the <code>update()</code> method in the Stripe webhook handler.</p><p>This is the code:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >server</span>.<span >post</span>(<span >&#39;/api/host/edit&#39;</span>, <span >async</span> (<span >req</span>, <span >res</span>) =&gt; {  <span >const</span> <span >houseData</span> <span >=</span> <span >req</span>.<span >body</span>.<span >house</span>  <span >if</span> (<span >!</span><span >req</span>.<span >session</span>.<span >passport</span>) {    <span >res</span>.<span >writeHead</span>(<span >403</span>, {      <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span>    })    <span >res</span>.<span >end</span>(      <span >JSON</span>.<span >stringify</span>({        <span >status</span><span >:</span> <span >&#39;error&#39;</span>,        <span >message</span><span >:</span> <span >&#39;Unauthorized&#39;</span>      })    )    <span >return</span>  }  <span >const</span> <span >userEmail</span> <span >=</span> <span >req</span>.<span >session</span>.<span >passport</span>.<span >user</span>  <span >User</span>.<span >findOne</span>({ <span >where</span><span >:</span> { <span >email</span><span >:</span> <span >userEmail</span> } }).<span >then</span>(<span >user</span> =&gt; {    <span >House</span>.<span >findByPk</span>(<span >houseData</span>.<span >id</span>).<span >then</span>(<span >house</span> =&gt; {      <span >if</span> (<span >house</span>) {        <span >if</span> (<span >house</span>.<span >host</span> <span >!==</span> <span >user</span>.<span >id</span>) {          <span >res</span>.<span >writeHead</span>(<span >403</span>, {            <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span>          })          <span >res</span>.<span >end</span>(            <span >JSON</span>.<span >stringify</span>({              <span >status</span><span >:</span> <span >&#39;error&#39;</span>,              <span >message</span><span >:</span> <span >&#39;Unauthorized&#39;</span>            })          )          <span >return</span>        }        <span >House</span>.<span >update</span>(<span >houseData</span>, {          <span >where</span><span >:</span> {            <span >id</span><span >:</span> <span >houseData</span>.<span >id</span>          }        })          .<span >then</span>(() =&gt; {            <span >res</span>.<span >writeHead</span>(<span >200</span>, {              <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span>            })            <span >res</span>.<span >end</span>(<span >JSON</span>.<span >stringify</span>({ <span >status</span><span >:</span> <span >&#39;success&#39;</span>, <span >message</span><span >:</span> <span >&#39;ok&#39;</span> }))          })          .<span >catch</span>(<span >err</span> =&gt; {            <span >res</span>.<span >writeHead</span>(<span >500</span>, {              <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span>            })            <span >res</span>.<span >end</span>(<span >JSON</span>.<span >stringify</span>({ <span >status</span><span >:</span> <span >&#39;error&#39;</span>, <span >message</span><span >:</span> <span >err</span>.<span >name</span> }))          })      } <span >else</span> {        <span >res</span>.<span >writeHead</span>(<span >404</span>, {          <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span>        })        <span >res</span>.<span >end</span>(          <span >JSON</span>.<span >stringify</span>({            <span >message</span><span >:</span> <span >`Not found`</span>          })        )        <span >return</span>      }    })  })})</code></pre></div><p>A lot of which is just for handling the errors and various edge cases.</p><p>Next part: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-34-house-description/\">Airbnb clone, safe HTML for the house description</a></p>      ",
  "image": "https://flaviocopes.com/img/avatar.png",
  "description": "This post is part of a new series where we build a clone of Airbnb with Next.js. See the first post here.\n  Part 1: Let’s start by installing Next.js Part 2: Build the list of houses Part 3: Build the house detail view Part 4: CSS and navigation bar Part 5: Start with the date picker Part 6: Add the sidebar Part 7: Add react-day-picker Part 8: Add the calendar to the page Part 9: Configure the DayPickerInput component Part 10: Sync the start and end dates Part 11: Show the price for the chosen dates Part 12: Login and signup forms Part 13: Activate the modal Part 14: Send registration data to the server Part 15: Add postgres Part 16: Implement model and DB connection Part 17: Create a session token Part 18: Implement login Part 19: Determine if we are logged in Part 20: Change state after we login Part 21: Log in after registration Part 22: Create the models and move data to the db Part 23: Use the database instead of the file Part 24: Handle bookings Part 25: Handle booked dates Part 26: Prevent booking if already booked Part 27: Adding Stripe for payments Part 28: Airbnb clone, handling Stripe webhooks Part 29: Airbnb clone, view bookings Part 30: Airbnb clone, clean bookings Part 31: Airbnb clone, managing houses Part 32: Airbnb clone, adding a new house  In the previous lesson we let people add a new house.",
  "publisher": "Flaviocopes",
  "publisherUrl": "https://flaviocopes.com/"
}