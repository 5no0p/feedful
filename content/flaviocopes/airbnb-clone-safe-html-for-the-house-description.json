{
  "title": "Airbnb clone, safe HTML for the house description",
  "url": "https://flaviocopes.com/clone-airbnb-nextjs-34-house-description/",
  "date": "Sat, 08 Jan 2022 07:00:00 +0200",
  "content": "        <blockquote><p>This post is part of a new series where we build a clone of Airbnb with Next.js. <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-introduction/\">See the first post here</a>.</p></blockquote><ul><li>Part 1: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-1-install-nextjs/\">Let&rsquo;s start by installing Next.js</a></li><li>Part 2: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-2-list-houses/\">Build the list of houses</a></li><li>Part 3: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-3-house-detail/\">Build the house detail view</a></li><li>Part 4: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-4-navigation/\">CSS and navigation bar</a></li><li>Part 5: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-5-datepicker/\">Start with the date picker</a></li><li>Part 6: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-6-add-sidebar/\">Add the sidebar</a></li><li>Part 7: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-7-calendar-library/\">Add react-day-picker</a></li><li>Part 8: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-8-add-calendar/\">Add the calendar to the page</a></li><li>Part 9: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-9-configure-calendar/\">Configure the DayPickerInput component</a></li><li>Part 10: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-10-sync-dates/\">Sync the start and end dates</a></li><li>Part 11: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-11-show-price/\">Show the price for the chosen dates</a></li><li>Part 12: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-12-login-signup-forms/\">Login and signup forms</a></li><li>Part 13: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-13-activate-modals/\">Activate the modal</a></li><li>Part 14: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-14-send-registration-data-to-server/\">Send registration data to the server</a></li><li>Part 15: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-15-add-postgres/\">Add postgres</a></li><li>Part 16: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-16-implement-model-and-database-connection/\">Implement model and DB connection</a></li><li>Part 17: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-17-create-session/\">Create a session token</a></li><li>Part 18: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-18-login/\">Implement login</a></li><li>Part 19: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-19-determine-login/\">Determine if we are logged in</a></li><li>Part 20: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-20-logged-in-after-login/\">Change state after we login</a></li><li>Part 21: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-21-login-after-registration/\">Log in after registration</a></li><li>Part 22: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-22-models-data-db/\">Create the models and move data to the db</a></li><li>Part 23: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-23-use-db-instead-of-file/\">Use the database instead of the file</a></li><li>Part 24: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-24-implement-bookings/\">Handle bookings</a></li><li>Part 25: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-25-booked-dates/\">Handle booked dates</a></li><li>Part 26: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-26-prevent-booking/\">Prevent booking if already booked</a></li><li>Part 27: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-27-add-stripe/\">Adding Stripe for payments</a></li><li>Part 28: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-28-stripe-webhooks/\">Airbnb clone, handling Stripe webhooks</a></li><li>Part 29: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-29-view-bookings/\">Airbnb clone, view bookings</a></li><li>Part 30: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-30-clean-bookings/\">Airbnb clone, clean bookings</a></li><li>Part 31: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-31-managing-houses/\">Airbnb clone, managing houses</a></li><li>Part 32: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-32-adding-a-new-house/\">Airbnb clone, adding a new house</a></li><li>Part 33: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-33-edit-houses/\">Airbnb clone, edit houses</a></li></ul><p>Our form is great, but we have a problem: the house description.</p><p>It is handling the description as HTML:</p><p><img src=\"1.png\" alt=\"\" /></p><p>Unless our target audience for house owners is people that know HTML, this is not going to do a good job.</p><p>We need a more user friendly editor.</p><p>Second thing, even more important, is that we still don&rsquo;t have it in the single page view, in the <code>pages/houses/[id].js</code> file.</p><p>I deferred this task until now, because I want to show you something.</p><p>If we add the house description to <code>pages/houses/[id].js</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\">...<span >&lt;</span><span >p</span><span >&gt;</span>{<span >props</span>.<span >house</span>.<span >title</span>}<span >&lt;</span><span >/p&gt;</span><span >&lt;</span><span >div</span><span >&gt;</span>{<span >props</span>.<span >house</span>.<span >description</span>}<span >&lt;</span><span >/div&gt;</span>...</code></pre></div><p>We&rsquo;ll find a bad surprise:</p><p><img src=\"2.png\" alt=\"\" /></p><p>The HTML is fully visible, and not interpreted! Just like in the editor above.</p><p>The reason is that JSX escapes all content by default, which is great to prevent <a href=\"https://flaviocopes.com/xss/\">XSS</a> for example, but not great in this case.</p><p>What we must do is, we have to use <code>dangerouslySetInnerHTML</code>:</p><blockquote><p><code>pages/houses/[id].js</code></p></blockquote><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >&lt;</span><span >div</span>  <span >dangerouslySetInnerHTML</span><span >=</span>{{    <span >__</span><span >html</span><span >:</span> <span >props</span>.<span >house</span>.<span >description</span>  }}<span >&gt;&lt;</span><span >/div&gt;</span></code></pre></div><p>to make the description interpreted as HTML.</p><p>But if we don&rsquo;t do any kind of filtering to the description, a house owner could also write JavaScript into the description, for example:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-html\" data-lang=\"html\">&lt;<span >script</span>&gt;<span >alert</span>(<span >&#39;test&#39;</span>)&lt;/<span >script</span>&gt;</code></pre></div><p>And this would run on the house page to people browsing for houses.</p><p>This is an <a href=\"https://flaviocopes.com/xss/\">XSS vulnerability</a>.</p><p>Let&rsquo;s do the first step first - we add an editor.</p><h2 id=\"add-the-pell-editor\">Add the Pell editor</h2><p>The editor I chose is <a href=\"https://github.com/jaredreich/pell\">Pell</a>.</p><p>It&rsquo;s easy to use and small in size.</p><p>There&rsquo;s also a React wrapper available at <a href=\"https://github.com/bpetetot/react-pell\">https://github.com/bpetetot/react-pell</a>.</p><p>Install it using npm:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-sh\" data-lang=\"sh\">npm install react-pell</code></pre></div><p>then go into <code>components/HouseForm.js</code> and import it:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> <span >Editor</span> <span >from</span> <span >&#39;react-pell&#39;</span></code></pre></div><p>Now change</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-jsx\" data-lang=\"jsx\">&lt;<span >p</span>&gt;  &lt;<span >label</span>&gt;<span >House</span> <span >description</span>&lt;/<span >label</span>&gt;  &lt;<span >textarea</span>    <span >required</span>    <span >onChange</span><span >=</span>{<span >event</span> =&gt; <span >setDescription</span>(<span >event</span>.<span >target</span>.<span >value</span>)}    <span >value</span><span >=</span>{<span >description</span>}&gt;&lt;/<span >textarea</span>&gt;&lt;/<span >p</span>&gt;</code></pre></div><p>to this:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-jsx\" data-lang=\"jsx\">&lt;<span >div</span>&gt;  &lt;<span >Editor</span>    <span >onChange</span><span >=</span>{<span >html</span> =&gt; <span >setDescription</span>(<span >html</span>)}    <span >defaultContent</span><span >=</span>{<span >description</span>}    <span >actions</span><span >=</span>{[<span >&#39;bold&#39;</span>, <span >&#39;underline&#39;</span>, <span >&#39;italic&#39;</span>]}  /&gt;&lt;/<span >div</span>&gt;</code></pre></div><p>and add this CSS block at the bottom, before the closing <code>&lt;/div&gt;</code> tag of the component:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-jsx\" data-lang=\"jsx\">&lt;<span >style</span> <span >jsx</span> <span >global</span>&gt;{<span >`</span><span >  .pell-container {</span><span >    border: 1px solid #ccc;</span><span >  }</span><span >  .pell,</span><span >  .pell-content {</span><span >    box-sizing: border-box;</span><span >  }</span><span >  .pell-content {</span><span >    height: 300px;</span><span >    outline: 0;</span><span >    overflow-y: auto;</span><span >    padding: 10px;</span><span >  }</span><span >  .pell-actionbar {</span><span >    background-color: #fff;</span><span >    border-bottom: 1px solid hsla(0, 0%, 4%, 0.1);</span><span >  }</span><span >  .pell-button {</span><span >    background-color: transparent;</span><span >    border: none;</span><span >    cursor: pointer;</span><span >    height: 30px;</span><span >    outline: 0;</span><span >    width: 30px;</span><span >    vertical-align: bottom;</span><span >    color: black;</span><span >  }</span><span >  .pell-button-selected {</span><span >    background-color: #f0f0f0;</span><span >  }</span><span >`</span>}&lt;/<span >style</span>&gt;</code></pre></div><p>This is the end result:</p><p><img src=\"3.png\" alt=\"\" /></p><p>You should now be able to save the house description.</p><h2 id=\"solving-the-xss-problem\">Solving the XSS problem</h2><p>Now off to the second part - the XSS vulnerability caused by the use of <code>dangerouslySetInnerHTML</code>.</p><p>How do we solve that? In the backend we are going to whitelist some tags in the description, eliminating all other tags. I&rsquo;m going to use the <a href=\"https://www.npmjs.com/package/sanitize-html\">sanitize-html npm package</a>.</p><p>Run</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-sh\" data-lang=\"sh\">npm install sanitize-html</code></pre></div><p>Now in <code>server.js</code> we add this line at the top:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >sanitizeHtml</span> <span >=</span> <span >require</span>(<span >&#39;sanitize-html&#39;</span>)</code></pre></div><p>and before saving the house using Sequelize in the <code>/api/host/edit</code> and <code>/api/host/new</code> endpoints, we add:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >houseData</span>.<span >description</span> <span >=</span> <span >sanitizeHtml</span>(<span >houseData</span>.<span >description</span>, {  <span >allowedTags</span><span >:</span> [ <span >&#39;b&#39;</span>, <span >&#39;i&#39;</span>, <span >&#39;em&#39;</span>, <span >&#39;strong&#39;</span>, <span >&#39;p&#39;</span>, <span >&#39;br&#39;</span> ]})</code></pre></div><p>This will clean the description and remove all tags except the ones we specifically allow.</p><p>Next part: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-35-image-upload/\">Airbnb clone, upload the house image</a></p>      ",
  "image": "https://flaviocopes.com/img/avatar.png",
  "description": "This post is part of a new series where we build a clone of Airbnb with Next.js. See the first post here.\n  Part 1: Let’s start by installing Next.js Part 2: Build the list of houses Part 3: Build the house detail view Part 4: CSS and navigation bar Part 5: Start with the date picker Part 6: Add the sidebar Part 7: Add react-day-picker Part 8: Add the calendar to the page Part 9: Configure the DayPickerInput component Part 10: Sync the start and end dates Part 11: Show the price for the chosen dates Part 12: Login and signup forms Part 13: Activate the modal Part 14: Send registration data to the server Part 15: Add postgres Part 16: Implement model and DB connection Part 17: Create a session token Part 18: Implement login Part 19: Determine if we are logged in Part 20: Change state after we login Part 21: Log in after registration Part 22: Create the models and move data to the db Part 23: Use the database instead of the file Part 24: Handle bookings Part 25: Handle booked dates Part 26: Prevent booking if already booked Part 27: Adding Stripe for payments Part 28: Airbnb clone, handling Stripe webhooks Part 29: Airbnb clone, view bookings Part 30: Airbnb clone, clean bookings Part 31: Airbnb clone, managing houses Part 32: Airbnb clone, adding a new house Part 33: Airbnb clone, edit houses  Our form is great, but we have a problem: the house description.",
  "publisher": "Flaviocopes",
  "publisherUrl": "https://flaviocopes.com/"
}