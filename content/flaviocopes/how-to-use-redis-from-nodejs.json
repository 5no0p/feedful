{
  "title": "How to use Redis from Node.js",
  "url": "https://flaviocopes.com/how-to-use-redis-nodejs/",
  "date": "Mon, 24 Jan 2022 07:00:00 +0200",
  "content": "        <p>One of the most popular libraries to work with a Redis server from a Node.js app is <code>node-redis</code>, available at <a href=\"https://github.com/NodeRedis/node-redis\">https://github.com/NodeRedis/node-redis</a>.</p><p>Install the library in your project:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-sh\" data-lang=\"sh\">npm install redis</code></pre></div><blockquote><p>Tip: don&rsquo;t forget to first run <code>npm init -y</code> if the project is brand new and you don&rsquo;t have a <code>package.json</code> file already.</p></blockquote><h2 id=\"connect-to-the-redis-instance\">Connect to the Redis instance</h2><p>Once the library is installed, require it in your project using</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >redis</span> <span >=</span> <span >require</span>(<span >&#39;redis&#39;</span>)</code></pre></div><p>or</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> <span >redis</span> <span >from</span> <span >&#39;redis&#39;</span></code></pre></div><p>Once you have the <code>redis</code> object, create a new client using</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >client</span> <span >=</span> <span >redis</span>.<span >createClient</span>({  <span >url</span><span >:</span> <span >&#39;redis://YOUR REDIS INSTANCE URL&#39;</span>})</code></pre></div><p>and connect using (inside an async function):</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >await</span> <span >client</span>.<span >connect</span>()</code></pre></div><p>Once you have the client, we can perform all the things we know that Redis can do.</p><p>To close the connection, call:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >quit</span>()</code></pre></div><h2 id=\"store-and-retrieve-key-values\">Store and retrieve key values</h2><p>Store a key value pair into redis using <code>set()</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >set</span>(<span >&#34;&lt;key&gt;&#34;</span>, <span >&#34;&lt;value&gt;&#34;</span>)</code></pre></div><p>Example:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >set</span>(<span >&#34;name&#34;</span>, <span >&#34;Flavio&#34;</span>)<span >client</span>.<span >set</span>(<span >&#34;age&#34;</span>, <span >37</span>)</code></pre></div><p>If you run <code>KEYS *</code> in <code>redis-cli</code> on a clean Redis server, you&rsquo;ll see the two keys appearing:</p><p><img src=\"keys.png\" alt=\"\" /></p><p>You can get the value stored in a key using <code>get()</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >value</span> <span >=</span> <span >await</span> <span >client</span>.<span >get</span>(<span >&#34;name&#34;</span>)</code></pre></div><p>Delete a key/value string using</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >del</span>(<span >&#34;names&#34;</span>)</code></pre></div><h2 id=\"working-with-lists\">Working with lists</h2><p>In Redis we can work with lists using the</p><ul><li><code>LPUSH</code></li><li><code>RPUSH</code></li><li><code>LTRIM</code></li><li><code>LRANGE</code></li></ul><p>commands we introduced in the Redis module. They map directly as <code>client</code> object methods.</p><p>Create a list using</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >lPush</span>(<span >&#39;names&#39;</span>, <span >&#39;Flavio&#39;</span>)</code></pre></div><p>Push a new item to the bottom of the list:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >rPush</span>(<span >&#39;names&#39;</span>, <span >&#39;Roger&#39;</span>)</code></pre></div><p>Or at the top of the list:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >lPush</span>(<span >&#39;names&#39;</span>, <span >&#39;Syd&#39;</span>)</code></pre></div><p>List all the items in a list using:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >result</span> <span >=</span> <span >await</span> <span >client</span>.<span >lRange</span>(<span >&#39;names&#39;</span>, <span >0</span>, <span >-</span><span >1</span>)<span >//result is [ &#39;Roger&#39;, &#39;Flavio&#39;, &#39;Syd&#39; ]</span></code></pre></div><p>Drop items from a list using</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >rPop</span>(<span >&#39;names&#39;</span>)</code></pre></div><p>Delete a list using</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >del</span>(<span >&#39;names&#39;</span>)</code></pre></div><h2 id=\"working-with-sets\">Working with sets</h2><p>In Redis we work with sets using</p><ul><li><code>SADD</code></li><li><code>SPOP</code></li><li><code>SMEMBERS</code>.</li></ul><p>and other Redis commands, that map directly as <code>client</code> object methods.</p><p>Create a set using</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >sAdd</span>(<span >&#39;names&#39;</span>, <span >&#39;Flavio&#39;</span>)</code></pre></div><p>Add more items to the set:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >sAdd</span>(<span >&#39;names&#39;</span>, <span >&#39;Roger&#39;</span>)</code></pre></div><p>You can add multiple ones at once:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >sAdd</span>(<span >&#39;names&#39;</span>, <span >&#39;Roger&#39;</span>, <span >&#39;Syd&#39;</span>)</code></pre></div><p>also by passing an array:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >names</span> <span >=</span> [<span >&#39;Flavio&#39;</span>, <span >&#39;Roger&#39;</span>, <span >&#39;Syd&#39;</span>]<span >client</span>.<span >sAdd</span>(<span >&#39;names&#39;</span>, <span >names</span>)</code></pre></div><p>List all the items in a set using:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >names</span> <span >=</span> <span >await</span> <span >client</span>.<span >sMembers</span>(<span >&#39;names&#39;</span>)</code></pre></div><p>Drop a random item from a set using:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >sPop</span>(<span >&#39;names&#39;</span>)</code></pre></div><p>Add a second parameter to drop multiple random items:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >sPop</span>(<span >&#39;names&#39;</span>, <span >3</span>)</code></pre></div><p>Delete a set using</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >del</span>(<span >&#39;names&#39;</span>)</code></pre></div><h2 id=\"working-with-hashes\">Working with hashes</h2><p>In Redis we work with hashes using a set of commands that include</p><ul><li><code>HMSET</code></li><li><code>HGETALL</code></li><li><code>HSET</code></li><li><code>HINCRBY</code>.</li></ul><p>and other commands we introduced in the Redis module, that map directly as <code>client</code> object methods.</p><p>Create a hash using</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >hSet</span>(<span >&#39;person:1&#39;</span>, <span >&#39;name&#39;</span>, <span >&#39;Flavio&#39;</span>, <span >&#39;age&#39;</span>, <span >37</span>)</code></pre></div><p>To get all the properties of a user, use HGETALL:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >items</span> <span >=</span> <span >client</span>.<span >hGetAll</span>(<span >&#39;person:1&#39;</span>)</code></pre></div><p>You can update a hash property using HSET:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >hSet</span>(<span >&#39;person:1&#39;</span>, <span >&#39;age&#39;</span>, <span >38</span>)</code></pre></div><p>You can increment a value stored in a hash using HINCRBY:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >hIncrBy</span>(<span >&#39;person:1&#39;</span>, <span >&#39;age&#39;</span>, <span >1</span>)</code></pre></div><p>Delete a hash using</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >del</span>(<span >&#39;person:1&#39;</span>)</code></pre></div><h2 id=\"subscriptions\">Subscriptions</h2><p>Subscriptions are an amazing feature of Redis, powering us to do really fancy things in Node.js.</p><p>A publisher sends a message on a channel. Multiple subscribers receive it.</p><p>Subscribe to a channel using</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >await</span> <span >subscriber</span>.<span >subscribe</span>(<span >&#39;dogs&#39;</span>, (<span >message</span>) =&gt; {  <span >console</span>.<span >log</span>(<span >message</span>);})</code></pre></div><p>Publish to a channel using <code>client.publish('&lt;channel&gt;', '&lt;message&gt;')</code></p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >client</span>.<span >publish</span>(<span >&#39;dogs&#39;</span>, <span >&#39;Roger&#39;</span>)</code></pre></div><p>Be aware that you can&rsquo;t publish and subscribe from the same <code>client</code> instance.</p><p>To do so in the same app, create 2 clients:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >subscriber</span> <span >=</span> <span >redis</span>.<span >createClient</span>({ ... })<span >const</span> <span >publisher</span> <span >=</span> <span >redis</span>.<span >createClient</span>({ ... })<span >await</span> <span >subscriber</span>.<span >subscribe</span>(<span >&#39;dogs&#39;</span>, (<span >message</span>) =&gt; {  <span >console</span>.<span >log</span>(<span >channel</span>, <span >message</span>);})<span >publisher</span>.<span >publish</span>(<span >&#39;dogs&#39;</span>, <span >&#39;Roger&#39;</span>)</code></pre></div>      ",
  "image": "https://flaviocopes.com/img/avatar.png",
  "description": "One of the most popular libraries to work with a Redis server from a Node.js app is node-redis, available at https://github.com/NodeRedis/node-redis.\nInstall the library in your project:\nnpm install redis  Tip: don’t forget to first run npm init -y if the project is brand new and you don’t have a package.json file already.\n Connect to the Redis instance Once the library is installed, require it in your project using",
  "publisher": "Flaviocopes",
  "publisherUrl": "https://flaviocopes.com/"
}