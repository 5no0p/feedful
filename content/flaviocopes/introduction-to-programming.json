{
  "title": "Introduction to Programming",
  "url": "https://flaviocopes.com/introduction-to-programming/",
  "date": "Wed, 12 Jan 2022 07:00:00 +0200",
  "content": "        <p>This post is a big introductory course to programming.</p><p>Programming in general.</p><p>Before getting your hands on a particular, specific programming language, there are concepts you need to be familiar with. Concepts that do not depend on a <em>specific</em> programming language, but are essential for every developer.</p><p>If you&rsquo;re new to programming, the goal of this post is to prepare you and give you the basic build blocks, the <em>concepts</em>.</p><p>In particular you&rsquo;ll learn:</p><ul><li>what is a computer</li><li>what is a program</li><li>what is a programming language</li><li>what&rsquo;s your job as a programmer</li><li>what&rsquo;s <em>not</em> your job as a programmer</li><li>the different programming paradigms that exist</li><li>the different programming languages you can use, and which one to choose</li><li>what is a bug</li></ul><p>and more!</p><h2 id=\"why-should-you-become-a-programmer\">Why should you become a programmer?</h2><p>I teach programming and I get a lot of emails every day. I talk to lots and lots of programmers, and wannabe programmers.</p><p>I have a good grasp of what makes people learn programming.</p><p>People want to build the app they always dreamed about. They want to make this project come to life, they want to get their dream come true. Having an app run on your computer or on your phone, creating the game you and your friends dream about!</p><p>People want to learn the craft as a hobby. I&rsquo;ve talked with people in their 70s and 80s that are learning to program. For fun. To enjoy a new challenge. To create an app for their friends.</p><p>People want to start a new career in tech. It&rsquo;s not a surprise - programming as a job is very attractive: it&rsquo;s in high demand, you work indoors, and the average pay is good. Depending on the location and the level, of course. You can also work remotely, which is a huge advantage in my opinion.</p><p>And of course those are just 3 examples. You might have a different need, but whichever the need is, learning programming is definitely one skill you will want to have in the future.</p><h2 id=\"what-you-need-to-become-a-programmer\">What you need to become a programmer</h2><p>You don&rsquo;t need to be a computer scientist or study engineering or be a genius at math to pick up programming.</p><p>It&rsquo;s a skill that you can learn at any point in time, at any age, and - let me say - it&rsquo;s an amazing skill to have.</p><p>You need 4 things to become a programmer, from scratch:</p><ul><li>patience</li><li>dedication</li><li>time</li><li>consistency</li></ul><p>That&rsquo;s all you need.</p><p>Patience because every time you learn something new, you need to be patient and do one step after another, until you can connect the dots.</p><p>Dedication because it&rsquo;s not certainly an easy skill to master.</p><p>Time because learning things properly requires time. And with programming, many times you will get stuck on something and it will take some time to research. And a great programmer spends as much time thinking about the problem than the time they spend programming.</p><p>Consistency because if you can dedicate a little time every day, say 1 or 2 hours, learning to code, you will become a great programmer in a short amount of time.</p><p>Oh and you will probably need a computer, too. Any moderately recent computer is good enough, you don&rsquo;t need a fancy top of the line MacBook Pro. Don&rsquo;t use that as an excuse :)</p><h2 id=\"how-does-a-computer-work-an-overview\">How does a computer work? An overview</h2><p>By computer I mean every electronic device that&rsquo;s programmable: laptops and desktop computers, smartphones, smartwatches, your car, your dishwasher, your camera and even smaller things like a dog&rsquo;s GPS device. A lot of things, right? We&rsquo;re surrounded by computers.</p><p>Computers are electronic devices powered by programs. Since the middle of the 20th century, programmers have been working on making those computers always faster, and always easier and more accessible to program.</p><p>Machines are <strong>dumb</strong>. They do what you tell them. They can&rsquo;t really think or decide things. They can only follow your instructions, and this makes you, a programmer, a very powerful person.</p><p>We call the electronic part of a computer <strong>hardware</strong>, and the programs part <strong>software</strong>.</p><p>When you program a computer, you provide it instructions that are transformed into bits, the only thing that the electronics can understand. A bit can only have two values: 0 and 1.</p><p>When you look at your computer or smartphone, you see a nice interface. That&rsquo;s the result of years of evolution. Underneath, millions of instructions are executed every second, to serve you the list of the best restaurants nearby. All by talking to the Internet, an incredibly vast network of computers - the biggest artificial ecosystem we humans ever built.</p><p>Covering how a computer works (and the network of computers) would take us tons of hours. Instead, after this brief overview I&rsquo;m going to focus on the software part.</p><p>We&rsquo;ll keep the hardware side for another course, in the future!</p><h2 id=\"what-is-a-program\">What is a program</h2><p>Let&rsquo;s now look at what a program is. Your browser (Chrome, Firefox or the one you use) is a program.</p><p>This website is made possible by a program that I use to help me generate it. I provide the content, the program generates the HTML pages.</p><p>Your phone is run by a big program, called iOS or Android. That&rsquo;s a <em>huge</em> program, of course, and it&rsquo;s not even fair to call it a program - it&rsquo;s a collection, an ecosystem of programs. To which we give a name.</p><p>The apps on your computer are programs. The apps on your phone, too.</p><p>Your car is controlled by programs.</p><p>A program is a set of instructions, which the programmer assembles to make the machine perform a specific action.</p><p>Typically the program is <strong>compiled</strong> by the programmer before it can be executed. Sometimes however programs are <strong>interpreted</strong> by another program.</p><p>Like in the case of JavaScript, which is run by the browser. In this exact moment, there is some JavaScript code I wrote, being executed by the browser you are using.</p><p>So, here&rsquo;s a first big separation of programs: compiled and interpreted. And different programming languages will allow one or the other method.</p><p>Ultimately a program is something you build to perform something specific. It might be helping simplify the management of an enterprise, ​or solving a problem, like the problem of boredom,​ by creating the ultimate video game.</p><p>Now that we&rsquo;ve defined what a program is, let&rsquo;s dive into what is programming.</p><h2 id=\"what-is-programming\">What is programming</h2><p>By programming we generally mean the craft of structuring instructions of code, written using a programming language, in order to create a working program.</p><p>I want to introduce something bigger to this concept however.</p><p>To me, programming is <strong>solving problems</strong>. And as such, programming starts way, way earlier than the time you reach for the keyboard and you start to type instructions on the computer.</p><p>Programming starts when you are thinking about the problem. Or the app.</p><p>Programming is when you are gathering the requirements, talking to all the people involved in the app, talking to the clients, analyzing all the different things that the app should do.</p><p>Programming is defining what the app should <strong>not</strong> do.</p><p>Programming is determining if your app is impossible or too costly to run, even before you start working on it.</p><p>Programming is drawing all the flow diagrams to help you solve a problem.</p><p>Programming is also when you are stuck and you need to solve a problem. How to search for answers on Google and how to ask a good question is a skill on its own.</p><p>In the end, 70% of programming is done outside of your code editor.</p><h2 id=\"what-is-a-programming-language\">What is a programming language?</h2><p>Computers are dumb. Despite all the talk about Artificial Intelligence, we&rsquo;re not there yet.</p><p>The computers we work with, today, are just machines that execute the things we tell them.</p><p>And we talk to them using a programming language.</p><p>A programming language is a set of instructions and rules that we use to interface with a machine.</p><p>There are many, many different programming languages. You can even create your own, if you are into that. But more frequently you&rsquo;ll want to use a programming language that others created a long time ago, made it perfect over time, and which just works without causing you headaches.</p><p>Some examples? JavaScript. Python. Swift. Ruby.</p><p>Every one of those languages solves a problem in a different domain or is particularly well suited in some situations.</p><p>JavaScript is the main language of the Web. It&rsquo;s the only language that browsers can execute inside Web pages.</p><p>Python and Ruby are mainly used on Web servers, or as more general purpose languages. Python is well known in the data science community, for example.</p><p>Swift, introduced by Apple, is the language used to create iPhone apps and in general all programs that run on Apple hardware.</p><p>I just mentioned those, but there are gazillions more. There&rsquo;s no single &ldquo;best&rdquo; programming language. It all depends on the situation, on you and your team knowledge, the hardware it needs to run on, and other things.</p><h2 id=\"computer-science-vs-programming\">Computer Science vs Programming</h2><p>Many programmers took CS (Computer Science) at the university. Computer Science is a common degree for programmers, because the &ldquo;Computer&rdquo; in the name is very appealing.</p><p>But CS is very, very, very different than day to day programming.</p><p>A Computer Science course will teach you lots of theory, algorithms analysis and very little <em>actual programming</em> that&rsquo;s required in the industry. It can also be seen more as a branch of mathematics. It&rsquo;s also quite complicated, if you ask me (I&rsquo;ve never been great at math).</p><p>Programming on the other hand is <em>using</em> the computer to make it do things that are very practical.</p><p>I personally took a <em>computer engineering</em> course in the University in Milan, which was more engineering than programming, too. Less theory than CS, but also little practical skills. All I know about programming, I learned by myself as a self-learner. Or on the job.</p><p>Here&rsquo;s good news for you.</p><p>As you are reading this, you probably didn&rsquo;t take a CS or CE course, and you might assume people that took those courses have a huge advantage over you.</p><p>Well guess what? They don&rsquo;t.</p><p>It&rsquo;s likely that a university - being a slow moving giant - will teach you an outdated programming language, outdated &ldquo;best practices&rdquo;, and all sort of things that you will need to unlearn over time - not an easy task.</p><p>Of course people going to those schools will learn things on their own, just like you, but you can easily get to the level of a CS student in a reasonable amount of time. Plus, you can avoid learning all sorts of theories that you will not find applicable in real life.</p><p>All things that are great to learn, of course, but which have little application in day to day programming.</p><h2 id=\"the-different-programming-paradigms-that-exist\">The different programming paradigms that exist</h2><p>You don&rsquo;t just have different programming languages.</p><p>You also have different programming paradigms.</p><p>The most popular and well known ones today are</p><ul><li><strong>procedural</strong> programming</li><li><strong>object oriented</strong> programming</li><li><strong>functional</strong> programming</li></ul><p>In procedural programming, code is executed in a linear way from the beginning to the end. You tell the computer what to do, from start to finish, and it does.</p><p>The name comes from &ldquo;procedure&rdquo;. Which literally means doing something, using specific instructions, executed in order.</p><p>I think this is the more familiar kind of programming, thinking about it from a beginner&rsquo;s perspective. We all imagine code being something like a list of things you tell the computer to do. C is a good example of a procedural programming language.</p><p>Object oriented programming is a different beast. We try to model the domain of the problem at hand using objects. Objects have a <em>type</em>, which is called <em>class</em>. Object oriented programming, or OOP, was made popular by Smalltalk and later by Java. Programs written using an OOP methodology are more abstract than a list of things the computer must do. We think in terms of objects, and the interactions between them. For example you have a Car object, and a Person object. The Person drives a Car, and so on. Objects can maintain their own state, and encapsulate it. This is really mimicking the real world. A person does not need to know how a car works under the hoods. They simply drive it. The car abstracts away all its complexity and offers a specific way to drive it (brakes, wheel, etc).</p><p>Functional programming takes an approach to programming that derives from math functions. But don&rsquo;t be afraid - it&rsquo;s nothing complex. Actually, I think it&rsquo;s the simplest way to tackle a complex problem and get to a solution. And JavaScript is perfectly equipped to perform functional programming (FP). In FP, you organize code in little functions, and every function returns a result that is always the same, given the same inputs. Same inputs = same outputs. This is an essential point. Functions can be composed, passed as arguments, and function operations like recursion allow us to solve all the problems without creating complex structures for our abstractions.</p><p>Those are just 3 of the most popular methodologies. Which is best among them? It always depends on the problem at hand. And the favorite approach can also be influenced by the status quo, or what the market prefers. For example object oriented programming was more or less the de facto standard. Today I see it widely used, but I also see a lot more people talk about functional programming.</p><p>Now, I mentioned several programming languages which can be associated to those methodologies, but many programming languages can allow different styles. JavaScript for example allows all 3 styles.</p><p>Now there&rsquo;s another distinction we must make, and it&rsquo;s between <strong>imperative</strong> and <strong>declarative</strong> programming. Imperative means we tell the computer what to do. The exact actions. C is a very imperative programming language. We move X bytes into memory, we retrieve variable Y, and so on.Declarative programming means we describe what we want, and we don&rsquo;t care how the computer does it.</p><p>If you are familiar with HTML, HTML is a declarative language. JSX, if you know about it, is a declarative way to define user interfaces.</p><p>Which one is best? It depends. Generally speaking, imperative programming is best suited for lower level languages, like C or Go, which we use to create very performant applications. The more far away we are from the actual details of the machine, the less performant our code is. But also, the easier it is to write it. It&rsquo;s a compromise. As always.</p><h2 id=\"compiled-vs-interpreted\">Compiled vs interpreted</h2><p>We write code into a text file, and this file is processed by the computer.</p><p>It can be processed in 2 ways, depending on the programming language used. I already mentioned we can separate programming languages in 2 big groups: <strong>compiled</strong> and <strong>interpreted</strong>.</p><p>If the programming language is compiled, the program is analyzed by a program called <em>compiler</em>, and it must be <strong>compiled</strong> before it can be executed.</p><p>In this case our program, written to text files, is transformed into an executable file, which is no more text-based. It will be a <code>.exe</code> file on Windows, for example. It&rsquo;s the case of C, Go, Swift.</p><p>With an interpreted programming language, like JavaScript, Python, Ruby or PHP, you don&rsquo;t need this step. Sometimes you&rsquo;ll see those languages referred as <em>scripting languages</em>, but I find this term a bit ..offensive to the power of those languages.</p><p>In this case there is a program, called <em>interpreter</em>, that has the ability to execute our own program. We skip the compilation phase, and proceed directly to execution.</p><p>The difference is quite a big deal. Compiled programming languages are able to intercept and point out errors, bugs or possible issues before execution. With interpreted languages, an error might only be discovered when a particular situation happens (mind you, this will also happen with compiled languages, but with a lower chance).</p><p>But interpreted languages feel more lightweight to write. The process is different enough to have fans of each approach.</p><h2 id=\"gui-vs-cli\">GUI vs CLI</h2><p>You can create (and find) many types of programs. We can generally classify them into 2 macro groups:</p><ol><li>programs that have a Graphical User Interface (GUI)</li><li>programs that have a Command Line Interface (CLI)</li></ol><p>The difference between the two is significant, and it&rsquo;s the same between DOS and Windows, if you are familiar with those 2 environments.</p><p>Or the same between the Linux you run on a server, and the Gnome or KDE based Linux you run on your desktop computer.</p><p>GUI applications have an interface you interact with using the mouse, and you can clearly <em>see</em> it on the screen, typically inside a window, along with other GUI applications. Many GUI applications run at the same time.</p><p>A CLI application is accessed from a <em>terminal</em>, a text based interface which only allows you to interact with one application at a time.</p><p>Generally speaking, CLI applications are great apps for pro users, that know how to access the terminal inside their system (it&rsquo;s available on any kind of computer), and how to use any CLI app. They know how to find the help for the app, and are generally tech savvy.</p><p>A CLI application is the most flexible kind of application because the UI does not need to be filled with options - options are typed by the user if needed. They are best suited for one-time tasks. Or even long running tasks, provided you can run multiple terminal windows.</p><p>Think <code>create-react-app</code>, Vim, the C compiler, and more.</p><p>One special kind of CLI apps are backend applications that do not interface with the user on the system, but accept interactions across the network. In this case, the CLI is used to start (and stop) the application. Or to provide a way to instruct the system to run the application as a daemon (a long running process).</p><p>GUI applications on the other hand need a way to visually offer all the available options on the screen. They are best suited to provide rich interactions for mouse based inputs. Think Microsoft Word or Google Earth or the Chrome browser.</p><p>In JavaScript you will generally create both kind of applications. GUI apps using React, Vue, or any other framework that will run inside the browser (the actual GUI app, actually).</p><p>And CLI apps using Node.js, to provide services through network connections.</p><h2 id=\"where-to-go-from-here\">Where to go from here</h2><p>Download my <a href=\"https://flaviocopes.com/page/javascript-handbook/\">JavaScript Beginner&rsquo;s Handbook</a>!</p>      ",
  "image": "https://flaviocopes.com/img/avatar.png",
  "description": "This post is a big introductory course to programming.\nProgramming in general.\nBefore getting your hands on a particular, specific programming language, there are concepts you need to be familiar with. Concepts that do not depend on a specific programming language, but are essential for every developer.\nIf you’re new to programming, the goal of this post is to prepare you and give you the basic build blocks, the concepts.",
  "publisher": "Flaviocopes",
  "publisherUrl": "https://flaviocopes.com/"
}