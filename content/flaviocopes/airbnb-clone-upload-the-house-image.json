{
  "title": "Airbnb clone, upload the house image",
  "url": "https://flaviocopes.com/clone-airbnb-nextjs-35-image-upload/",
  "date": "Sun, 09 Jan 2022 07:00:00 +0200",
  "content": "        <blockquote><p>This post is part of a new series where we build a clone of Airbnb with Next.js. <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-introduction/\">See the first post here</a>.</p></blockquote><ul><li>Part 1: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-1-install-nextjs/\">Let&rsquo;s start by installing Next.js</a></li><li>Part 2: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-2-list-houses/\">Build the list of houses</a></li><li>Part 3: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-3-house-detail/\">Build the house detail view</a></li><li>Part 4: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-4-navigation/\">CSS and navigation bar</a></li><li>Part 5: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-5-datepicker/\">Start with the date picker</a></li><li>Part 6: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-6-add-sidebar/\">Add the sidebar</a></li><li>Part 7: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-7-calendar-library/\">Add react-day-picker</a></li><li>Part 8: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-8-add-calendar/\">Add the calendar to the page</a></li><li>Part 9: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-9-configure-calendar/\">Configure the DayPickerInput component</a></li><li>Part 10: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-10-sync-dates/\">Sync the start and end dates</a></li><li>Part 11: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-11-show-price/\">Show the price for the chosen dates</a></li><li>Part 12: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-12-login-signup-forms/\">Login and signup forms</a></li><li>Part 13: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-13-activate-modals/\">Activate the modal</a></li><li>Part 14: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-14-send-registration-data-to-server/\">Send registration data to the server</a></li><li>Part 15: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-15-add-postgres/\">Add postgres</a></li><li>Part 16: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-16-implement-model-and-database-connection/\">Implement model and DB connection</a></li><li>Part 17: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-17-create-session/\">Create a session token</a></li><li>Part 18: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-18-login/\">Implement login</a></li><li>Part 19: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-19-determine-login/\">Determine if we are logged in</a></li><li>Part 20: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-20-logged-in-after-login/\">Change state after we login</a></li><li>Part 21: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-21-login-after-registration/\">Log in after registration</a></li><li>Part 22: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-22-models-data-db/\">Create the models and move data to the db</a></li><li>Part 23: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-23-use-db-instead-of-file/\">Use the database instead of the file</a></li><li>Part 24: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-24-implement-bookings/\">Handle bookings</a></li><li>Part 25: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-25-booked-dates/\">Handle booked dates</a></li><li>Part 26: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-26-prevent-booking/\">Prevent booking if already booked</a></li><li>Part 27: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-27-add-stripe/\">Adding Stripe for payments</a></li><li>Part 28: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-28-stripe-webhooks/\">Airbnb clone, handling Stripe webhooks</a></li><li>Part 29: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-29-view-bookings/\">Airbnb clone, view bookings</a></li><li>Part 30: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-30-clean-bookings/\">Airbnb clone, clean bookings</a></li><li>Part 31: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-31-managing-houses/\">Airbnb clone, managing houses</a></li><li>Part 32: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-32-adding-a-new-house/\">Airbnb clone, adding a new house</a></li><li>Part 33: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-33-edit-houses/\">Airbnb clone, edit houses</a></li><li>Part 34: <a href=\"https://flaviocopes.com/clone-airbnb-nextjs-34-house-description/\">Airbnb clone, safe HTML for the house description</a></li></ul><p>One thing we miss now in the new house form, and when editing an existing house, is being able to upload images.</p><p>We are currently limited by uploading an image somewhere, and pasting the URL in the form. Not very practical for our users!</p><p>Let&rsquo;s add this functionality.</p><p>Before we start, we must add an npm package, called <code>express-fileupload</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-sh\" data-lang=\"sh\">npm install express-fileupload</code></pre></div><p>and we add it as a middleware to Express, in <code>server.js</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >fileupload</span> <span >=</span> <span >require</span>(<span >&#39;express-fileupload&#39;</span>)</code></pre></div><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >server</span>.<span >use</span>(  <span >//...</span><span ></span>  <span >fileupload</span>())</code></pre></div><p>This is needed because otherwise the server can&rsquo;t parse file uploads.</p><p>Next, in <code>components/HouseForm.js</code>, change the current input field that we used:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-html\" data-lang=\"html\">&lt;<span >p</span>&gt;  &lt;<span >label</span>&gt;House picture URL&lt;/<span >label</span>&gt;  &lt;<span >input</span> <span >required</span> <span >onChange</span><span >=</span><span >{event</span> <span >=</span>&gt; setPicture(event.target.value)} type=&#39;text&#39;  placeholder=&#39;House picture URL&#39; value={picture} /&gt;&lt;/<span >p</span>&gt;</code></pre></div><p>to this combo of a file upload and an image visualizer:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-html\" data-lang=\"html\">&lt;<span >p</span>&gt;  &lt;<span >label</span>&gt;House picture&lt;/<span >label</span>&gt;  &lt;<span >input</span> <span >type</span><span >=</span><span >&#34;file&#34;</span> <span >id</span><span >=</span><span >&#34;fileUpload&#34;</span> /&gt;  {picture ? &lt;<span >img</span> <span >src</span><span >=</span><span >&#34;{picture}&#34;</span> <span >width</span><span >=</span><span >&#34;200&#34;</span> <span >alt</span><span >=</span><span >&#34;House image&#34;</span> /&gt; : &#39;&#39;}&lt;/<span >p</span>&gt;</code></pre></div><p>If you try to reload the page, the file picker should be there! Let&rsquo;s add <code>input[type=file]</code> to the CSS styling for forms we already have at the bottom:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-css\" data-lang=\"css\"><span >&lt;</span><span >style</span> <span >jsx</span> <span >&gt;</span> {  <span >`</span> <span >input[type=&#39;number&#39;],</span>  <span >input[type=&#39;file&#39;],</span>  <span >select,</span>  <span >textarea</span> <span >{</span>    <span >/*... */</span>  }<span >}</span></code></pre></div><p>Let&rsquo;s also limit the file input to only accept images:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-html\" data-lang=\"html\">&lt;<span >input</span> <span >type</span><span >=</span><span >&#34;file&#34;</span> <span >id</span><span >=</span><span >&#34;fileUpload&#34;</span> <span >accept</span><span >=</span><span >&#34;image/*&#34;</span> /&gt;</code></pre></div><blockquote><p>See <a href=\"https://flaviocopes.com/how-to-accept-images-file-input/\">https://flaviocopes.com/how-to-accept-images-file-input/</a></p></blockquote><p>Now we must handle the <code>change</code> event on this input field:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-jsx\" data-lang=\"jsx\">&lt;<span >input</span>  <span >type</span><span >=</span><span >&#39;file&#39;</span>  <span >id</span><span >=</span><span >&#39;fileUpload&#39;</span>  <span >accept</span><span >=</span><span >&#39;image/*&#39;</span>  <span >onChange</span><span >=</span>{<span >async</span> (<span >event</span>) =&gt; {    <span >const</span> <span >files</span> <span >=</span> <span >event</span>.<span >target</span>.<span >files</span>    <span >const</span> <span >formData</span> <span >=</span> <span >new</span> <span >FormData</span>()    <span >formData</span>.<span >append</span>(<span >&#39;image&#39;</span>, <span >files</span>[<span >0</span>])    <span >const</span> <span >response</span> <span >=</span> <span >await</span> <span >axios</span>.<span >post</span>(<span >&#39;/api/host/image&#39;</span>, <span >formData</span>)    <span >setPicture</span>(<span >&#39;http://localhost:3000&#39;</span> <span >+</span> <span >response</span>.<span >data</span>.<span >path</span>)  }}/&gt;</code></pre></div><p>This is invoked when the file input changes (an image had been selected). In there, we get the image from <code>event.target.files</code> and we POST it to <code>/host/image</code>, a new endpoint we&rsquo;re going to make next.</p><p>We expect a <code>path</code> property coming back, which will be the URL of our image, and we assign it using the <code>setPicture</code> hook update function.</p><p>Let&rsquo;s now make the POST <code>/api/host/image</code> endpoint in <code>server.js</code>.</p><p>We first check if the user is logged in, and we get the image from the request:</p><blockquote><p><code>server.js</code></p></blockquote><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >server</span>.<span >post</span>(<span >&#39;/api/host/image&#39;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >if</span> (<span >!</span><span >req</span>.<span >session</span>.<span >passport</span>) {    <span >res</span>.<span >writeHead</span>(<span >403</span>, {      <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span>,    })    <span >res</span>.<span >end</span>(      <span >JSON</span>.<span >stringify</span>({        <span >status</span><span >:</span> <span >&#39;error&#39;</span>,        <span >message</span><span >:</span> <span >&#39;Unauthorized&#39;</span>,      })    )    <span >return</span>  }  <span >const</span> <span >image</span> <span >=</span> <span >req</span>.<span >files</span>.<span >image</span>})</code></pre></div><p>Next we run <code>npm install randomstring</code> and we import that module:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >randomstring</span> <span >=</span> <span >require</span>(<span >&#39;randomstring&#39;</span>)</code></pre></div><p>we need it to generate a random string for our image, since users might submit images with the same name. I&rsquo;m just going to prepend a random string to the image original name, but in the real world you might want to completely randomize it, and also check if you don&rsquo;t already have that name before overwriting the file:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >fileName</span> <span >=</span> <span >randomstring</span>.<span >generate</span>(<span >7</span>) <span >+</span> <span >image</span>.<span >name</span>.<span >replace</span>(<span >/\\s/g</span>, <span >&#39;&#39;</span>)<span >const</span> <span >path</span> <span >=</span> <span >__</span><span >dirname</span> <span >+</span> <span >&#39;/public/img/&#39;</span> <span >+</span> <span >fileName</span></code></pre></div><p>Then we call the <code>mv</code> property of the uploaded image. That is provided to us by the <code>express-fileupload</code> module. We move it to <code>path</code> and then we communicate the success (or an error!) back to the client:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >image</span>.<span >mv</span>(<span >path</span>, (<span >error</span>) =&gt; {  <span >if</span> (<span >error</span>) {    <span >console</span>.<span >error</span>(<span >error</span>)    <span >res</span>.<span >writeHead</span>(<span >500</span>, {      <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span>,    })    <span >res</span>.<span >end</span>(<span >JSON</span>.<span >stringify</span>({ <span >status</span><span >:</span> <span >&#39;error&#39;</span>, <span >message</span><span >:</span> <span >error</span> }))    <span >return</span>  }  <span >res</span>.<span >writeHead</span>(<span >200</span>, {    <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span>,  })  <span >res</span>.<span >end</span>(<span >JSON</span>.<span >stringify</span>({ <span >status</span><span >:</span> <span >&#39;success&#39;</span>, <span >path</span><span >:</span> <span >&#39;/img/&#39;</span> <span >+</span> <span >fileName</span> }))})</code></pre></div><p>This is the complete code for our <code>/api/host/image</code> endpoint:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >server</span>.<span >post</span>(<span >&#39;/api/host/image&#39;</span>, (<span >req</span>, <span >res</span>) =&gt; {  <span >if</span> (<span >!</span><span >req</span>.<span >session</span>.<span >passport</span>) {    <span >res</span>.<span >writeHead</span>(<span >403</span>, {      <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span>,    })    <span >res</span>.<span >end</span>(      <span >JSON</span>.<span >stringify</span>({        <span >status</span><span >:</span> <span >&#39;error&#39;</span>,        <span >message</span><span >:</span> <span >&#39;Unauthorized&#39;</span>,      })    )    <span >return</span>  }  <span >const</span> <span >image</span> <span >=</span> <span >req</span>.<span >files</span>.<span >image</span>  <span >const</span> <span >fileName</span> <span >=</span> <span >randomstring</span>.<span >generate</span>(<span >7</span>) <span >+</span> <span >image</span>.<span >name</span>.<span >replace</span>(<span >/\\s/g</span>, <span >&#39;&#39;</span>)  <span >const</span> <span >path</span> <span >=</span> <span >__</span><span >dirname</span> <span >+</span> <span >&#39;/public/img/&#39;</span> <span >+</span> <span >fileName</span>  <span >image</span>.<span >mv</span>(<span >path</span>, (<span >error</span>) =&gt; {    <span >if</span> (<span >error</span>) {      <span >console</span>.<span >error</span>(<span >error</span>)      <span >res</span>.<span >writeHead</span>(<span >500</span>, {        <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span>,      })      <span >res</span>.<span >end</span>(<span >JSON</span>.<span >stringify</span>({ <span >status</span><span >:</span> <span >&#39;error&#39;</span>, <span >message</span><span >:</span> <span >error</span> }))      <span >return</span>    }    <span >res</span>.<span >writeHead</span>(<span >200</span>, {      <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span>,    })    <span >res</span>.<span >end</span>(<span >JSON</span>.<span >stringify</span>({ <span >status</span><span >:</span> <span >&#39;success&#39;</span>, <span >path</span><span >:</span> <span >&#39;/img/&#39;</span> <span >+</span> <span >fileName</span> }))  })})</code></pre></div><p>Now you should be able to successfully submit a new image for the house, and also update existing houses images!</p><p><img src=\"1.png\" alt=\"\" /></p><p>Awesome, we reached the end of the project!</p><p>On an application like this, we had a lot of things to build.</p><p>We also have lots of things we still miss, just to provide a basic house booking marketplace to our users.</p><p>On the top of my mind, we currently miss adding communication between host and guests, allowing to add multiple images and manage the gallery, managing superhosts, allowing different prices for different dates, blocking out days..</p><p>We&rsquo;d need one year to complete all that.</p><p>Maybe in a future sequel!</p>      ",
  "image": "https://flaviocopes.com/img/avatar.png",
  "description": "This post is part of a new series where we build a clone of Airbnb with Next.js. See the first post here.\n  Part 1: Let’s start by installing Next.js Part 2: Build the list of houses Part 3: Build the house detail view Part 4: CSS and navigation bar Part 5: Start with the date picker Part 6: Add the sidebar Part 7: Add react-day-picker Part 8: Add the calendar to the page Part 9: Configure the DayPickerInput component Part 10: Sync the start and end dates Part 11: Show the price for the chosen dates Part 12: Login and signup forms Part 13: Activate the modal Part 14: Send registration data to the server Part 15: Add postgres Part 16: Implement model and DB connection Part 17: Create a session token Part 18: Implement login Part 19: Determine if we are logged in Part 20: Change state after we login Part 21: Log in after registration Part 22: Create the models and move data to the db Part 23: Use the database instead of the file Part 24: Handle bookings Part 25: Handle booked dates Part 26: Prevent booking if already booked Part 27: Adding Stripe for payments Part 28: Airbnb clone, handling Stripe webhooks Part 29: Airbnb clone, view bookings Part 30: Airbnb clone, clean bookings Part 31: Airbnb clone, managing houses Part 32: Airbnb clone, adding a new house Part 33: Airbnb clone, edit houses Part 34: Airbnb clone, safe HTML for the house description  One thing we miss now in the new house form, and when editing an existing house, is being able to upload images.",
  "publisher": "Flaviocopes",
  "publisherUrl": "https://flaviocopes.com/"
}